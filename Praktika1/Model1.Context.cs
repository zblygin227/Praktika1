//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Praktika1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AgentyEntities : DbContext
    {
        public AgentyEntities()
            : base("name=AgentyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<agent> agents { get; set; }
        public virtual DbSet<client> clients { get; set; }
        public virtual DbSet<demand> demands { get; set; }
        public virtual DbSet<@object> objects { get; set; }
        public virtual DbSet<supply> supplies { get; set; }
        public virtual DbSet<type_objects> type_objects { get; set; }
        public virtual DbSet<AgentsAll> AgentsAlls { get; set; }
        public virtual DbSet<ClientAll> ClientAlls { get; set; }
    
        public virtual int AddAgent(string name, string family, string lastname, Nullable<int> comission)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("family", family) :
                new ObjectParameter("family", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var comissionParameter = comission.HasValue ?
                new ObjectParameter("comission", comission) :
                new ObjectParameter("comission", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAgent", nameParameter, familyParameter, lastnameParameter, comissionParameter);
        }
    
        public virtual int AddClient(string name, string family, string lastname, string telephone, string email)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("family", family) :
                new ObjectParameter("family", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClient", nameParameter, familyParameter, lastnameParameter, telephoneParameter, emailParameter);
        }
    
        public virtual int AddDemands(Nullable<int> clientid, Nullable<int> aggentid, Nullable<int> objecttype, string city, string street, string house, string number, Nullable<decimal> minprice, Nullable<decimal> maxprice)
        {
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var aggentidParameter = aggentid.HasValue ?
                new ObjectParameter("aggentid", aggentid) :
                new ObjectParameter("aggentid", typeof(int));
    
            var objecttypeParameter = objecttype.HasValue ?
                new ObjectParameter("objecttype", objecttype) :
                new ObjectParameter("objecttype", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            var houseParameter = house != null ?
                new ObjectParameter("house", house) :
                new ObjectParameter("house", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(decimal));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDemands", clientidParameter, aggentidParameter, objecttypeParameter, cityParameter, streetParameter, houseParameter, numberParameter, minpriceParameter, maxpriceParameter);
        }
    
        public virtual int AddSupplies(Nullable<decimal> price, Nullable<int> aggentid, Nullable<int> clientid, Nullable<int> realEstatled)
        {
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var aggentidParameter = aggentid.HasValue ?
                new ObjectParameter("aggentid", aggentid) :
                new ObjectParameter("aggentid", typeof(int));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var realEstatledParameter = realEstatled.HasValue ?
                new ObjectParameter("RealEstatled", realEstatled) :
                new ObjectParameter("RealEstatled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSupplies", priceParameter, aggentidParameter, clientidParameter, realEstatledParameter);
        }
    
        public virtual int DelAgent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelAgent", idParameter);
        }
    
        public virtual int DelClient(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelClient", idParameter);
        }
    
        public virtual int DelDemands(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelDemands", idParameter);
        }
    
        public virtual int DelSupplies(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelSupplies", idParameter);
        }
    
        public virtual int RedacteAgent(Nullable<int> id, string name, string family, string lastname, Nullable<int> comission)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("family", family) :
                new ObjectParameter("family", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var comissionParameter = comission.HasValue ?
                new ObjectParameter("comission", comission) :
                new ObjectParameter("comission", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RedacteAgent", idParameter, nameParameter, familyParameter, lastnameParameter, comissionParameter);
        }
    
        public virtual int RedacteClient(Nullable<int> id, string name, string family, string lastname, string telephone, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("family", family) :
                new ObjectParameter("family", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RedacteClient", idParameter, nameParameter, familyParameter, lastnameParameter, telephoneParameter, emailParameter);
        }
    
        public virtual int RedacteSupplies(Nullable<int> id, Nullable<decimal> price, Nullable<int> aggentid, Nullable<int> clientid, Nullable<int> realEstatled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var aggentidParameter = aggentid.HasValue ?
                new ObjectParameter("aggentid", aggentid) :
                new ObjectParameter("aggentid", typeof(int));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var realEstatledParameter = realEstatled.HasValue ?
                new ObjectParameter("RealEstatled", realEstatled) :
                new ObjectParameter("RealEstatled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RedacteSupplies", idParameter, priceParameter, aggentidParameter, clientidParameter, realEstatledParameter);
        }
    
        public virtual int RedDemands(Nullable<int> id, Nullable<int> clientid, Nullable<int> aggentid, Nullable<int> objecttype, string city, string street, string house, string number, Nullable<decimal> minprice, Nullable<decimal> maxprice)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var aggentidParameter = aggentid.HasValue ?
                new ObjectParameter("aggentid", aggentid) :
                new ObjectParameter("aggentid", typeof(int));
    
            var objecttypeParameter = objecttype.HasValue ?
                new ObjectParameter("objecttype", objecttype) :
                new ObjectParameter("objecttype", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            var houseParameter = house != null ?
                new ObjectParameter("house", house) :
                new ObjectParameter("house", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(decimal));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RedDemands", idParameter, clientidParameter, aggentidParameter, objecttypeParameter, cityParameter, streetParameter, houseParameter, numberParameter, minpriceParameter, maxpriceParameter);
        }
    }
}
